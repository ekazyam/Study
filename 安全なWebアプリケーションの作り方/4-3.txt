■表示処理を起因とした問題
クロスサイトスクリプティングとエラーメッセージの漏洩の2種類が存在する。

■クロスサイトスクリプティングについて(XSS)
1.サイト利用者のブラウザ上で攻撃用スクリプトが動作し、
　　クッキーに保存されたセッションIDが盗まれ、なりすましの被害に遭う。
2.サイト利用者のブラウザ上で攻撃用スクリプトが動作し、
　　正規サイトの利用を利用者の権限で行われてしまう。
3.偽の入力フォームから情報が漏洩する。(フィッシング)
上記いづれかの脆弱性が存在した場合でも、XSSの発生元となりうる。

■XSSの例
javascriptを流し込むことでXSSを発生させ、cookieに保存されている
セッションIDを盗み出す。(セッションハイジャックと呼ぶ)
★例
http://example.jp/43/43-001.php?keyword=test
http://example.jp/43/43-001.php?keyword=<script>alert(document.cookie)</script>

実際は受動的攻撃(罠サイトに利用者を誘導)を行い、利用者のセッションIDを盗み出す
ことを目的として実行されることが多い。

★攻撃実例1
1.iframe内に脆弱なページが埋め込まれた罠サイトを表示する。
  ☆iframeは同一生成元ポリシーにより、別ドメインでも表示可能である。
  ☆iframe外からiframe内(別ドメイン)へのjavascript実行は禁止されているので
    iframe内のページそのものに害のあるjavascriptを埋め込む。
2.iframe内でcookie値を盗み出すjavascriptが動作する。
3.さらに、表示されたcookie値をクエリ情報としてiframe内で別ページに送信し、
　遷移したページからメール等で攻撃者に盗み出されたセッションIDが送信される。
　☆cookieは利用者が書き換え可能である点を利用し、盗みだしたセッションIDを
　　 書き換え、攻撃被害者のIDになりすます。

★攻撃実例2
formの書き換えにより、意図しないページを表示させ、クレジットカードなどの個人情報を
攻撃者のページへ送信させる。
1.罠ページへアクセスさせる。
2.罠ページから正規サイトへのリンクを作成する。
  ☆このリンクには、正規サイトのformを書き換える構文が記載されている。 
    リンクに見えるがsubmitボタンであり、正規サイトへhtmlタグを含む偽のform要素
    が送信される。
    正規サイトでは受信したname要素を展開するphpの構文が書かれており、
    罠ページから送信された偽のform要素がパラメータとして展開される仕組みで
    ページが書き換えられる。

■XSSの種類
★反射型XSS
  攻撃用javascriptが正規サイトとは別のサイトに存在する場合に分類される。
  攻撃用スクリプトを含む罠が仕掛けられたサイトを閲覧することで、
  正規サイトに対してい攻撃が実行される。
  対策として正規サイトが渡されるリクエストパラメータのチェックを適切に行う必要がある。
★持続型XSS
  攻撃用javascirptが正規サイトに直接埋め込まれている場合に分類される。
  正規サイトが改ざんされている場合はこれに該当する。

■脆弱性が発生する原因
htmlで解釈される特殊な文字(<等)を適切に処理していない為に発生する。
htmlの記載箇所(要素/属性)によりエスケープする文字が異なる。
例えば<は&lt;という文字に置き換えることで正常に出力される。
これを文字参照(エスケープ)と呼ぶ。
以下に記載箇所に応じたエスケープの要点を纏める。

★要素内容のエスケープ
最低限要素は<と&を文字参照として処理すること。
<p>
要素内容←ここに<から開始される文字を挿入されるとhtmlタグと認識されるため。
<p>

★属性内容のエスケープ
最低限属性値を"で囲み、< " &を文字参照として処理すること。
<input type="tel" value="12-3456-78">←ここに"を挿入されると、
属性値の"がエスケープされていない場合、任意のjavascriptが挿入され、
セッションIDが盗まれる危険性がある。

★属性内容の書き換え攻撃例
<body>
<input type="input" name="mail" value=<?php echo $_GET['p'] ?>>
</body>

p要素に対して以下のデータを挿入する。
1+onmouseover%3dalert(document.cookie)
☆+はスペース、%3dは=を示す。

<body>
<input type="input" name="mail" value=1 onmouseover=alert(document.cookie)>
</body>

となり、任意のjavascriptが挿入可能となる。

ただし、属性値を"で囲った場合でも以下のpにより任意のjavascriptが挿入可能となる。
"+onmouserover%3dalert(document.cookie)

<body>
<input type="input" name="mail" value="" onmouseover=alert(document.cookie)>
</body>

★対策まとめ
最低限以下を実施することが必要。
要素→"と&をエスケープする。
属性→"で囲み、"&<をエスケープする。

PHPの場合、htmlspecialchars関数を利用して安全にエスケープできる。
☆第三引数は文字エンコーディングを指定するが、ここで指定するのはPHPで利用する内部エンコーディング形式である。

★保険的防止策
XSSは脆弱性になる箇所が多い為、以下を防止することで攻撃の被害を減らすことができる。
1.入力値チェック
　　→特殊文字をチェックすることで脆弱性をなくす。
  →場合により数値のみ等のルールを付ける。
2.httponly属性を付与
  →cookieの属性にhttponly属性を付与することでjavascirptからの読み出しを禁止する。
   php.iniにhttponly属性を付与する設定を行うことで属性の指定が可能となる。
3.TRACEメソッドの無効化
  →XST(クロスサイトトレーシング)と呼ばれる攻撃への対策。
   apacheではhttpd.confに設定を行うことで可能。
   ただし、最近のブラウザでは対策がなされているので実害は少ない。 

■XSS発展編
javascriptはURL部分にjavascript:javascript式という形式で実行できる。
以下の様なGETパラメータurlを読みだし、href属性のhtmlを生成するPHPを考える。
<a href="<?php echo htmlspecialchars($_GET['url']); ?>"ブックマーク
この場合、url=javascript:alert(document.cookie)というパラメータを渡した場合に、
cookieが読み出される不具合が生じる。
これは、hrefやsrc属性がjavascript指定が可能である点を利用した攻撃である。
★対策方法
1.urlを自動生成する場合は、渡されたパラメータについてhttp or httpsのみ許容するように
チェックを行う。
2.自動生成されるURLが罠が仕掛けられた外部のサイトでないかチェックする。
　　外部のサイトであった場合は、ユーザに確認し問題ないことを了承する。
  これをクッションページと呼ぶ。
  
■Javascriptの動的生成
★イベントハンドラのXSS(onload等)
javascriptをパラメータ展開し、サーバー側でjavascriptを動的生成する例を考える。
<body onload="init('<?php echo htmlspecialchars($_GET['name'],ENT_QUOTES) ?>')">

以上の構文に対し、以下のパラメータを渡すことで任意のjavascriptが実行可能である。
name=');alert(document.cookie)//

init('');alert(document.cookie)//')が実行される。

Javascriptの動的生成に関するエスケープは後述する。

★script要素内のXSS(body中の<script></script>)
以下の構文には脆弱性が含まれる。
<script>
	$('#name').text('<?php echo escape_js($_GET['name']); ?>');
</script>
nameパラメータを展開し、javascriptが実行される。
しかし、nameパラメータに</script>が含まれていた場合、そこでjavascriptが終了してしまう。
以下のnameパラメータを渡すと任意のjavascriptが実行される。
</script><script>alert(document.cookie)//

★javascriptの動的生成の脆弱性の対策
1.javascriptの文法から" ' \ 改行コードをエスケープする。
  "→\"
  '→\'
  \→\\
  改行→\n
2-1.イベントハンドラの中のjavascriptであれば、1.の方法の後、さらに
　　　 htmlをエスケープし、ダブルクォートで囲む。
2-2.script要素の中野javascriptであれば、1.の方法の後、さらに
　　　　</という文字列が出現しないようにする。
ただし、対策が複雑であり、推奨されない。

★UnicodeエスケープによるJavascriptの脆弱性対策
Javascriptを全てunicodeエスケープする手法がある。

★script要素の外部でパラメータを定義し、Javascriptから参照する手法
javascriptの動的生成を避ける事を目的とし、javascript以外で定義した
パラメータを読み込む手法を考える。
hiddenパラメータで定義した値はJavascriptから読み込むことができる。
また、属性値はhtmlscpecialcharasでエスケープした後、
ダブルクォートで囲む手順を定石として実施する。
<input type="hidden" id="familyname" value="<?php
	echo htmlspecialchars($familyname,ENT_COMPAT,'UTF-8'); ?>">

<script type="text/javascript">
	var familyname = document.getElementById('familyname').value;
</script>

メリットとして、javascriptの動的生成を回避できるので脆弱性の防止になる。
デメリットとして、javascriptで参照するパラメータが外部で定義されるので、
javascriptの可読性が落ちる。

■DOM based XSS
Javascriptによりクライアント側で表示処理を行うスクリプトを考える。
以下のスクリプトは脆弱性を含む。
<body>
こんにちは
</body>
<script type="text/javascript">
	document.URL.match(/name=([^&]*)/);
	document.write(unescape(RegExp.$1));
</script>

以下の様なURLでアクセスした場合に任意のJavascriptが実行される。
http://example.jp/43/43-011.html?name=<script>alert(document.cookie)</script>

★DOM based XSSへの対策
jqueryのライブラリではtext関数を用いて画面表示することで自動的にエスケープされる。
<script type="text/javascript">
	if(document.URL.match(/name=([^&]*)/))
	{
		var name = unescape(RegExp.$1);
		$('#name').text(name);
	}
</script>

★HTMLタグやCSSの入力を許可するサイトを構築する場合
構文が複雑であるため、htmlを解析するライブラリを利用することを推奨。
PHPから利用できる解析ライブラリはHTML Purifierなどがある。

■エラーメッセージの抑制
エラー内容が攻撃者にとって有益である可能性がある内部上が含まれる。
個人情報をエラー内容が含まれることにより情報が外部に漏れる。
これらを糸口として攻撃が行われる可能性があるため、詳細な内容は
エラーログに出力するに留める。
PHPの場合、詳細なエラーを抑制する場合は以下を設定する。
display_errors = Off
