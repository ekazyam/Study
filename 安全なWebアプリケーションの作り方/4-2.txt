■入力という概念について
httpリクエストで渡される文字列を入力という概念とする。(GET,POST,クッキー等)

■入力値に対するセキュリティ
入力→処理→出力　という流れでデータは処理され、入力について着目する。
入力値は以下のチェックを行う。
1.文字エンコーディングの妥当性
  →文字コードを使った攻撃を防ぐ為に実施する。
   PHPの場合mb_check_encoding関数を利用することで、
   指定した文字列に対し想定する文字エンコーディング(省略した場合はPHPの内部デフォルト)であるかチェックできる。
2.文字エンコーディングの変換
  →httpで扱う文字コードと内部コードが違う場合に実施する。
   言語によって異なり、自動変換もしくは明示的な変換を指定できる。
   PHPの場合、php.iniに指定したコードを明記すると自動的にエンコーディングが成される。
   サーバ側で自動変換を行うと変換できない文字コードは別の文字表示されるので、
   文字化けする可能性が含まれる。
   また、サーバの移転等でphp.iniが変更となった場合に所定の設定が漏れると自動変換が行われない。
   手動で行う場合はmb_convert_encoding関数を利用する。
3.パラメータ文字列の妥当性
  →Webアプリケーションの信頼性確保のために実施する。
   信頼性を確保することで、認知していないトラブル/脆弱性を回避する。
   ユーザの使いやすさ向上と、データの不整合を防ぐ。

★バイナリセーフとは
入力値がどんなバイト数でも扱えるということを示す。
PHPはnullバイトを正しく扱えない関数が存在する。
Webアプリケーションの入り口でnullバイトをチェックし、nullであればエラーを返す処理を導入することが
最も確実な方法である。

★入力値検証の基準
1.アプリケーションの要件に基づいて行うこと。
  例：電話番号、メールアドレス等。
2.制御文字のチェック
  CR,LF,tab等。
3.文字数のチェック
　　仕様として何文字許容するかを決定する。
　　SQLインジェクションの防止として所定文字数が10文字未満であることを条件とした場合、
　　結果としてSQLが形をなさないので、脆弱性としては存在するが、
　　実害がない、という例も存在する。

★どの値をチェックするか
ラジオボタン、テキストデータ、全てが対象となる。
クッキーにセッションIDを格納していた場合も対象となる。
また、不正な中継をしていないかをチェックする為に、Refererのチェックも該当する。

★PHPの関数についてのバイナリセーフ
ereg関数はバイナリセーフな関数ではないので、php5.3以降は非推奨である。
ereg関数は上記の特性のため、nullバイト文字が挿入された場合にチェックをすり抜ける。
pregもしくはmb_eregを使うこと。

★入力値検証について
関数化するなどして、ライブラリを作成しておけば再利用が可能である。
しかし、フレームワークを利用する場合は既に用意されている入力値チェック関数が存在する場合が多いので、
それらを利用することで開発の工数を下げることが可能である。

★要点
1.入力値検証はアプリケーションの仕様にもとづいて行う。(電話番号、メールアドレス等、画一的なものではない)
2.文字エンコーディングの検証
3.制御文字を含む検証(cr,lf,tab,nullバイト等)
4.文字数の検証

以上より以下の設計の順に行う。
1.設計時にパラメータの文字種/最大文字数を決定する。
2.設計時に入力方法の実装方針を決定する。
3.開発時に設計に従い実装を行う。
