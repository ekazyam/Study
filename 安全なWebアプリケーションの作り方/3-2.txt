■攻撃の種類
★能動的攻撃
SQLインジェクトション等の攻撃者が直接サーバを攻撃する手法。

★受動的攻撃
サーバ側の改ざん等により、サーバを閲覧したユーザを介して攻撃を行う手法。
1.マルウェアの感染による被害。
　→ブラウザの脆弱性が引き金となり、感染する場合がある。
2.正規サイトに罠を仕掛け、閲覧者に偽のサイトを閲覧させることで情報漏洩を促す。
　→初期段階として、攻撃者が正規サイトへ侵入(能動的攻撃)を行い、正規サイトの書き換えを行う。
　　次の段階として、利用者が正規サイトとして利用することで情報の漏洩を行う。(受動的攻撃)
3.サイトをまたがった攻撃手法。
　罠の存在するサイトにアクセスさせることで、閲覧者に攻撃性のあるhtmlをダウンロードさせる。
　次に、htmlに仕込まれた正規サイトに対して閲覧者が攻撃性のあるリクエストを送信することで、
　攻撃を成立させる。
　これは、利用者がログインしている前提で攻撃が開始されるため、あたかも利用者の意図により操作が行われているかの
　ように実行される。
　これをCSRF(クロスサイトリクエストフォージェリ)と呼ぶ。
　また、CSRFによる不正なレスポンスを得ることをXSS(クロスサイトスクリプティング)と呼ぶ。

★能動的攻撃の防止
サイト/ブラウザ(利用者)の双方で対策が必要である。
古いブラウザ等では上記に挙げた問題が発声する可能性がある。

★サンドボックスによる不正防止
JavascriptやAdobe flash player等で利用されている概念。
プログラムにできることの範囲を予め制限することで影響を抑える考え方。
以下のような概念を含む。
1.ローカルファイルへのアクセス禁止
2.プリンタ等の資源へのアクセス禁止
3.ネットワークアクセスの制限(後述)

★同一生成元ポリシー
javascriptによるサイトをまたがったアクセスの禁止を行う制限のこと。
罠の存在するサイトにiframeとして正規サイトが埋め込まれていた場合に、javascriptを通して
情報を取得できてしまう危険性があるため、取得できない制限がかかる。
この制限が無かった場合、罠のあるサイトにアクセスすると情報が取得されてしまう。

☆一部ソースを抜粋
<iframe name="iframe1" width="300" height="80" src="http://example.jp/32/32-002.html">
</iframe><br>
<input type="button" onclick="go()" value="パスワード→">
<script>
function go() {
 try {
  var x = iframe1.document.form1.passwd.value;
  document.getElementById('out').innerHTML = x;
 } catch (e) {
  alert(e.message);
 }
}
</script>

★同一生成元ポリシーとは
以下の条件を満たす事を同一生成元ポリシーと呼ぶ。
1.URLのホストが同一である。
  32-002.htmlが個人情報の入力されているページとして以下の通りの動作をする。
  OKなURL→http://example.jp/32/32-001.html
  NGなURL→http://trap.example.jp/32/32-001.html
2.プロトコルが同一である。
3.ポート番号が同一である。

同一生成元ポリシーにより別サイトからのデータへのアクセスが制限されるが、
正規サイトに対していjavascriptを送り込むことができた場合には、正規サイトで実行されるため、
情報が取得できてしまう可能性が存在する。
これをXSS(クロスサイトスクリプティング)と呼ぶ。

★Javascript以外のクロスドメインの可用性
1.frame要素→javascriptによる他ドメインの要素へのアクセスはNG
            表示だけならOK
2.img要素→OK(カメラ映像等は他のサイトからの配信である。)
  サーバ側でRefererのチェックをオンにすると他のサイトの画像は表示されなくなる。
  Refererについては3-1を参照。
3.script要素→OK(jsのプラグイン等)
  script要素で指定したjsスクリプトは、jsの置かれているサイトのクッキーが発行され、
  AのサイトにBサイトに設置されているというB2スクリプトが埋め込まれていた場合、A/Bというクッキーがそれぞれ発行される。
  B2スクリプトが実行される(リクエストが送信される)とレスポンスによりBサイトからBサイトのクッキーが発行される仕組みである。
4.CSS→OK(htmlのlink要素等)
5.form要素→OK(CSRFの悪用に繋がる。後述)
