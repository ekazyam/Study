■OSコマンドの呼び出しに対する脆弱性
Webアプリケーションの中にはOSのコマンドをシェル経由で実行するライブラリを備えるものが存在する。
この処理に攻撃者が任意のコマンドを渡すことで、
想定しないコマンドが実行される脆弱性が発生する。
これをOSコマンドインジェクションと呼ぶ。

以下の様な攻撃の例を考える。
1.OSコマンドインジェクションを用いて攻撃用ツールをサーバにダウンロードさせる。
2.ダウンロードしたツールに実行権限を与える。
3.ツールを実行し、OSの脆弱性を攻撃し、管理者権限を取得する。

★OSコマンドインジェクションを用いた攻撃例
以下の様なPHPの関数を考える。
system.("/usr/sbin/sendmail < -i < template.txt $mail")
OSのコマンドであるsendmailに対し、$mailの内容を展開し送信する内容である。
ここで以下の様な値を$mailに渡す。
hoge@hoge.com;cat /etc/passwd
hoge@hoge.comに対し、正常なメールが送信された後、cat /etc/passwdが実行される。
この脆弱性を用いることでOSで実行可能なコマンドを悪用可能となる。

★脆弱性の要因
OSコマンドを用いる場合、パイプ/リダイレクト等の機能が利用可能になる。
これは柔軟性を持つと同時に任意のコマンドを実行できる危険性を含む。
OSコマンドインジェクションが悪用される条件は以下の3つを全て満たす場合に成立する。
1.OSコマンドを利用するsystem,open等の関数を使用している。
2.利用者からのパラメータをsystem,open等の関数に渡している。
3.利用者からのパラメータに含まれるシェルのメタ文字($;|等)をエスケープしていない。

★OSコマンドインジェクションの対策
対策として、優先度の高い順に記載する。
1.OSコマンドの呼び出しを使用しない実装を検討する。
2.シェルを呼び出す関数を利用しない。
3.シェルを呼び出す関数にパラメータを渡さない。
4.シェルを呼び出す関数に渡すパラメータを適切にエスケープする。

1.の対策として以下の様な例が挙げられる。
  →PHPの場合、system("sendmail xxx")をmb_send_mail関数に置き換えができる。
   OSコマンドを呼び出さないことから、脆弱性への対処と、OSコマンド呼び出し時の
   オーバーヘッドの削減が期待できる。
2.の対策としてperlを例にする。
  →シェル呼び出し版：system("/bin/grep $keyword /var/data/*.txt")
   非呼び出し版：  system('/bin/grep','--',$keyword,glob('/var/data/*.txt'))
   非呼び出し型は、grepのオプションとして--を指定することで、続く値をパラメータとしてみなす。
   そのため、任意のオプションやコマンドが混入する要素が存在せず、安全である。
3.の対策としてsendmailを例にする。
  →sendmailは-tオプションを付与することで、To,Cc等のメールヘッダをヒアドキュメントで指定することができる。
  　渡したパラメータは開発者が想定する箇所に埋め込む。
  　この手順を実施することで、第三者による任意のコマンドの実行を防止する。
   fwrite($h, <<< EndOfMail
   	To:$mail
   	From:hoge.com
   	EndOfMail
   );
4.の対策についてPHPを用いて考える。
　　前提として、一般的に利用されているライブラリを用いることが重要である。
　　脆弱性の原因となる場合があるので、自作はしないこと。
  PHPでは、escapeshellarg関数を用いて安全にエスケープすることができる。

■OSコマンドインジェクションに対する保険的対策
上記を対策した上で、対策が漏れる可能性を考慮し、
以下の対策も併せて行っておくと良い。
1.渡されるパラメータの検証
  →文字種の制限等
2.アプリケーションサーバのユーザ権限を必要最小限とする。
  →アプリケーションサーバのユーザ権限を制限することで、ディレクトリトラバーサルを防止する効果もある。
3.WebサーバやOSへのパッチ適用
  →ミドルウェア/OSへの脆弱性のため、管理者権限への昇格がありうる。
  　これに備え、セキュリティパッチ等を適用し、脆弱性を修復する必要性がある。
