■セッション管理の不備による脆弱性
認証状態等の現在の状態を保持する方式として、cookieにセッションIDを保存し、
それに関連付けた情報をサーバー側で保持する方式が一般的である。
しかし、以下に挙げる様な場合にセッションIDが第三者に漏洩し、
セッションが乗っ取られる(セッションハイジャックと呼ぶ)可能性がある。

★セッションIDの推測
セッションIDの生成方式について、安易な推測が可能な仕組みを利用しない。
1.日時
2.連番
3.OSS化されており、セッションIDの生成の仕組みが公開されている場合。

★セッションIDの盗み出し
本来、cookieに保存されており、利用者しかセッションIDを知り得ない。
しかし、以下の様な手法を用い、セッションIDが盗み出される場合がある。
1.XSS(4-3参照)
2.HTTPヘッダインジェクションによる(後述)
3.URLに埋め込まれたセッションID(後述)

★セッションIDの強制
セッションIDが第三者により指定されてしまう現象を発生させることで、
第三者がセッションIDを知っている状況になる。
これをセッションIDの固定化攻撃と呼ぶ。

■推測可能なセッションIDについて
セッションハイジャックを防止するため、セッションIDを生成する機能は
自ら作成しないこと。
一般的に利用されているミドルウェア(PHP,Java等)の機能を用いて
セッションIDの生成を行うこと。

■推測可能なセッションIDの推測手法
脆弱性を含むセッションIDの生成機能では、
以下の様な情報をIDの生成元データとして利用することが多い。
☆推測される可能性の高い項目
・ユーザID
・メールアドレス
・日時
・リモートIP
・乱数
これらを収集し、IDの生成を予測することができる場合がある。

★セッションハイジャックによる影響
利用者の権限で第三者が正規サイトに対して不正な操作が可能となる。
ただし、重要な情報(パスワードの更新等)を更新する際にパスワードの再入力を促すことで、
変更を防止できる。
第三者に対して漏洩したのはセッションIDでありパスワードは漏洩していないからである。

★セッションIDの生成の脆弱性対策
一般的に利用されているミドルウェアの生成機能を利用すべき。
決して自作はしないこと。

■URLに埋め込んだセッションID
セッションIDをクッキーではなく、URLに埋め込む例を考える。
http://hogehoge?SESSID=1234567890ABC
セッションIDをURLに埋め込むと、Referer経由でセッションIDが漏洩する。
このことから、セッションIDをURLに埋め込んではならない。
しかし、古い携帯電話のブラウザでは、cookieの機能が無い場合があり、
この方法が実装されている場合もある。(後述)
★php.iniによるセッションID設定項目
デフォルトで以下の値を取る。
session.use_cookie = On
 →セッションIDの保存にcookieを用いる。
session.use_only_cookie = On
 →セッションIDをcookieにのみ保存する。
session.use_trans_sid = Off
 →セッションIDを自動的にURLに埋め込む。
  明示的に指定した場合はURLに埋め込み可能。

★セッションIDの埋め込みによる攻撃例
以下の様な例を考える。
1.URLにセッションIDが含まれている。http://hogehoge?SESSID=1234567890ABC
2.URLにセッションIDが含まれるページから外部のページへリンクできる。
3.2.の手順で遷移した外部のページがRefererを確認し、1.で生成したセッションIDが盗まれる。

このことから、以下の条件を満たす場合に、セッションIDが盗まれる可能性がある。
1.URLにセッションIDを含む。
2.任意のリンクが第三者により作成可能である。