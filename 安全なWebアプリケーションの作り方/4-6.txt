■セッション管理の不備による脆弱性
認証状態等の現在の状態を保持する方式として、cookieにセッションIDを保存し、
それに関連付けた情報をサーバー側で保持する方式が一般的である。
しかし、以下に挙げる様な場合にセッションIDが第三者に漏洩し、
セッションが乗っ取られる(セッションハイジャックと呼ぶ)可能性がある。

★セッションIDの推測
セッションIDの生成方式について、安易な推測が可能な仕組みを利用しない。
1.日時
2.連番
3.OSS化されており、セッションIDの生成の仕組みが公開されている場合。

★セッションIDの盗み出し
本来、cookieに保存されており、利用者しかセッションIDを知り得ない。
しかし、以下の様な手法を用い、セッションIDが盗み出される場合がある。
1.XSS(4-3参照)
2.HTTPヘッダインジェクションによる(後述)
3.URLに埋め込まれたセッションID(後述)

★セッションIDの強制
セッションIDが第三者により指定されてしまう現象を発生させることで、
第三者がセッションIDを知っている状況になる。
これをセッションIDの固定化攻撃と呼ぶ。

■推測可能なセッションIDについて
セッションハイジャックを防止するため、セッションIDを生成する機能は
自ら作成しないこと。
一般的に利用されているミドルウェア(PHP,Java等)の機能を用いて
セッションIDの生成を行うこと。

■推測可能なセッションIDの推測手法
脆弱性を含むセッションIDの生成機能では、
以下の様な情報をIDの生成元データとして利用することが多い。
☆推測される可能性の高い項目
・ユーザID
・メールアドレス
・日時
・リモートIP
・乱数
これらを収集し、IDの生成を予測することができる場合がある。

★セッションハイジャックによる影響
利用者の権限で第三者が正規サイトに対して不正な操作が可能となる。
ただし、重要な情報(パスワードの更新等)を更新する際にパスワードの再入力を促すことで、
変更を防止できる。
第三者に対して漏洩したのはセッションIDでありパスワードは漏洩していないからである。

★セッションIDの生成の脆弱性対策
一般的に利用されているミドルウェアの生成機能を利用すべき。
決して自作はしないこと。

■URLに埋め込んだセッションID
セッションIDをクッキーではなく、URLに埋め込む例を考える。
http://hogehoge?SESSID=1234567890ABC
セッションIDをURLに埋め込むと、Referer経由でセッションIDが漏洩する。
このことから、セッションIDをURLに埋め込んではならない。
しかし、古い携帯電話のブラウザでは、cookieの機能が無い場合があり、
この方法が実装されている場合もある。(後述)
★php.iniによるセッションID設定項目
デフォルトで以下の値を取る。
session.use_cookie = On
 →セッションIDの保存にcookieを用いる。
session.use_only_cookie = On
 →セッションIDをcookieにのみ保存する。
session.use_trans_sid = Off
 →セッションIDを自動的にURLに埋め込む。
  明示的に指定した場合はURLに埋め込み可能。

★セッションIDの埋め込みによる攻撃例
以下の様な例を考える。
1.URLにセッションIDが含まれている。http://hogehoge?SESSID=1234567890ABC
2.URLにセッションIDが含まれるページから外部のページへリンクできる。
3.2.の手順で遷移した外部のページがRefererを確認し、1.で生成したセッションIDが盗まれる。

このことから、以下の条件を満たす場合に、セッションIDが盗まれる可能性がある。
1.URLにセッションIDを含む。
2.任意のリンクが第三者により作成可能である。

■脆弱性発生の原因
URL埋め込みが発生する要因として以下が考えられる。
1.不適切なプログラミング
  →不適切なプログラミングにより、URLにセッションIDを保持する仕組みになっている。
2.不適切なサーバー設定
  →php.iniの設定により、URLへのセッションIDが埋め込まれる設定が成されている。
   4-6★pho.iniによるセッションID設定項目を参照。

■セッションIDの固定化攻撃
セッションIDの固定化攻撃は以下の手順に沿って行われる。
1.攻撃者がセッションIDを入手する。
2.攻撃者が被攻撃者に対し1.で入手したセッションIDを強要する。
3.被攻撃者は対象となるWebアプリケーションにログインする。
4.攻撃者が3.のタイミングを見計らい、対象となるWebアプリケーションを
　　被攻撃者の権限を持って利用する。

■ログイン前のセッションIDの固定化攻撃
ログイン前におけるセッションIDの固定化攻撃について考える。
以下の様な画面遷移を考える。
入力された情報はセッション変数に保持される。
1.利用者情報の入力画面
2.利用者情報の確認画面
3.利用者情報の登録画面
セッションIDが固定されるページとしてGETパラメータに以下のようなデータを与えるURLを用意する。
http://example.jp/463/46-020.php?PHPSESSID=ABC
被攻撃者はセッションID=ABCに固定された状態で1.のページに対し情報を入力していく。
攻撃者はセッションID=ABCで入力されている1.のページに対し定期的に監視することで、
情報入力欄を閲覧することができる。
この場合、漏洩する情報は1.で入力された情報に限定される。
ログイン前であるので、攻撃者はパスワードを知り得ることが無い為である。

■外部からのセッションIDの固定
cookieにセッションIDを外部から強要することはできない。
ただし、以下の様な場合には可能となる。
1.クッキーモンスター問題
  →ブラウザのバグであり、不適切なcookieが発行されてしまう問題。
2.XSS脆弱性
3.HTTPヘッダインジェクション

■セッションID固定に対する対策
1.古いブラウザを利用しない
  →前述のクッキーモンスター対策。
2.URLにセッションIDを埋め込まない
3.地域型ドメインを利用しない
4.XSS脆弱性への対処
5.HTTPヘッダインジェクションへの対処
6.cookieの書き換えを防止する作りこみ

セッションIDをログイン後に変更する。
ただし、開発環境や言語によりセッションIDの変更ができない場合が存在する。
この場合に、トークンという概念を用いて対応する。
ログイン時にトークンを生成し、cookieに保存する。
トークンはサーバー側にも保存する。
この両者を比較することで、同一である場合にのみ、正規の利用者として承認される仕組みを作る。
これはトークンがブラウザに保存されるタイミングがログイン時であることを利用した
仕組みである。
トークンは第三者に推測されない複雑性が要求されるため、
以下の様なOSの機能を利用することが推奨される。
★PHPを例にする
file_get_contents('/dev/urandom', false, NULL, 0, 24);
ただし、PHPには安全な以下の関数が存在するのでこちらを利用することを推奨する。
session_regenerate_id()
