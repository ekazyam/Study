■重要な処理の際に混入する脆弱性
Webアプリケーションには、重要な処理がある。
例えば、利用者の意図したリクエスト(操作)を確認する機能が必要である。
この機能に欠陥がある場合、脆弱性が発生する。
これをクロスサイトリクエストフォージェリ(CSRF)と呼ぶ。
重要な処理とは以下のような例を考える
1.利用者のアカウントによる購入
2.利用者のアカウントによる退会
3.利用者のアカウントによる書き込み
4.利用者のアカウントによるパスワード,メールアドレス等の個人情報変更
いずれも利用者の権限により実行される。
また、CSRFでは個人情報の取得はできない。

■CSRFによる攻撃手法と影響
以下の条件を満たすパスワード変更画面を考える。
1.利用者はログインしている。
2.パスワード変更画面はpwdパラメータをPOSTメソッドにより受け付ける。
この場合、以下の様な攻撃例が考えられる。
1.攻撃者がパスワード変更画面に対するpwdパラメータをPOSTする画面を用意する。
2.利用者がログインした状態で1.の画面にアクセスする。
結果として、攻撃者の意図した任意のpwdパラメータが正規サイトの
パスワード変更画面にPOSTされ、利用者のパスワードが第三者によって変更される事象が発生する。

■CSRFによる情報漏洩
CSRF実行後、パスワードが任意の値に変更された例を考える。
CSRFにより攻撃者は利用者のパスワードを知っている状態となるため、
不正なログインを許可してしまう。
そこから利用者の個人情報が盗まれてしまう事象が発生する。

■CSRFの影響
CSRFはWebアプリケーションで利用できる機能を利用し実行される。
そのため、CSRFはWebアプリケーションの設計段階で開発者が認知し、防止することが重要である。

■確認画面のある場合のCSRF
確認画面が存在する場合でも脆弱な場合がある。
確認画面へ遷移するパターンとして2パターンが存在する。
遷移パターン毎の特徴について記載する。
★hiddenパラメータを用いた遷移
入力ページA,確認ページB,実行ページCをそれぞれ考える。
A→Bへ以下の様にPOSTでデータを転送する。
<input type="text" name="mail" value="hoge@example.jp">

B→Cへhiddenでデータを転送する。
<input type="hidden" name="mail" value="hoge@example.jp">

Cでhiddenで転送されたデータを取り出し、変更する。

この場合、Cへデータを単純に転送しているだけであり、脆弱性が発生する。
攻撃者がCへデータを送信するページを作成することで、
利用者のデータを任意のデータへ変更することが可能となる。

★セッション変数を用いた遷移
iframeを用いて確認ページB,実行ページCを埋め込んだページを作成する。
Bへ以下の様にPOSTでデータを転送する。
<input type="text" name="mail" value="hoge@example.jp">

B→Cへデータを転送する際にセッション変数へ格納する。
$_SESSION['mail'] = $_POST['mail'];

Cで格納されたデータを取り出し、変更する。
$mail = $_SESSION['mail'];

手順として以下のを実施する。
1.確認ページBに対して$_POST['mail']に対して任意のメールアドレスをPOSTする。
  →まず、セッション変数への詰替えが必要である為、確認ページBを呼び出す。
2.タイミングを見計らい実行ページCを呼び出す。
  →1.の手順でデータが格納されたことを確認し、実行ページCを呼び出す。
   すぐに呼び出してしまうと、確認ページBへPOSTされる前に実行ページCが実行されてしまうため、
   確認ページBが表示されていること(厳密には確認不可だが実行が完了していること)を確認する。
実行画面までが多段(B-2,B-3等)になっている場合は、iframeを複数用意し、
POSTする画面をそれぞれ埋め込む。
iframeに埋め込んだB,B-2,B-3...が実行されてから実行ページCを実行することで、
変更が可能となる。

■CSRFの発生原因
1.form要素のaction属性にはどのドメインのURLでも指定できる。
  →悪意のあるサイトからの正規サイトへリクエストを送信できる。
2.クッキーに保存されたセッションIDは対象サイトに自動的に送信送信される。(3-1参照)
  →悪意のあるサイトのiframeに埋め込まれた正規サイトへのアクセスに対しても
  　クッキーは正規サイトのものとして送信されてしまう。
どのサイトからリクエストされたデータであるかはRefererを確認することで
判別可能である。(Refererについては3-1を参照)
Web開発者はRefererをチェックしないことが多い。
そのため、CSRFの脆弱性が含まれる場合がある。

★CSRFへの対策
重要な更新(個人情報の変更等)が正規の利用者の意図したものであるかを
確認する必要がある。
要点として以下2点を挙げる。
1.CSRFの対策が必要な重要なページを区別する。
2.Refererをチェックすることで正しいアクセスで利用しているか確認する。
☆対策の必要性
全てのページで実施する必要はない。
ECサイトの個人情報/決済ページ等は重要な更新と位置づける。
これらのページに対してはアクセス経路をチェックし、対策を行ったほうが良い。
悪意のあるページから不正なリクエストを受け付けてしまう可能性が含まれるからである。
また、ECサイトの商品一覧ページ等はCSRF対策をしないほうが良い。
正規の入り口だけに限定してしまうと、広告等からのアクセスが制限されるためである。

★対策が必要なページの定義と開発工程
1.要件定義工程で機能一覧を作成し、CSRF対策が必要な機能をマークする。
2.基本設計工程で画面遷移を考慮し、CSRF対策が必要な画面をマークする。
3.開発工程でCSRF対策を作成する。
具体的な考慮については後述。