■リダイレクトに対する問題
Google等のサイトでログインを実行すると、ログイン後、別のURLに転送される。
これをリダイレクトと呼ぶ。
リダイレクトは以下の様な脆弱性を含む場合がある。
1.オープンリダイレクタ脆弱性
2.HTTPヘッダ・インジェクション脆弱性

★用語解説
1.リダイレクト機能
　　→パラメータにより指定したURLに移動する機能のこと。
2.オープンリダイレクタ
　　→パラメータにより任意のドメインにリダイレクトできる機能のこと。
　　　利用者が意図しないタイミングで他のURLに遷移するため、
　　　フィッシング詐欺に悪用される可能性がある。
   リダイレクト先を固定にすることで防止可能。
   固定できない場合はリダイレクト先を特定のドメインに限定する。

■オープンリダイレクタによる攻撃例
以下の様なURLとパラメータを考える。
http://example.jp/47/47-001.php?url=http://trap.example.com/47/47-900.php
この例では利用者のIDとPWを入力する正規サイトのフォームを用意する。
正規サイトは、渡されたurlパラメータに応じたURLに遷移し、認証を進める機能を備えるものとする。
http://example.jp/47/47-001.php
ここで、urlパラメータに以下のような悪意のあるurlを渡す。
http://trap.example.com/47/47-900.php
正規サイトのフォームを真似て作成した悪意のあるページに誘導されることで、
利用者がIDとPWを誤って入力してしまう恐れがある。

■オープンリダイレクタによる脆弱性の要因
以下の様な場合に脆弱性が発生する。
1.urlパラメータ等、遷移するパラメータを第三者が指定可能である。
2.Webアプリケーション内で、遷移するドメインのチェックが無く、悪意のあるページに対する遷移が容易である。

ただし、広告等は元々外部のドメインを利用することが通常である。
その場合、上記1,2の要件を満たした場合でも、利用者が
外部のURLに遷移することが明白であれば、問題はない。

■脆弱性への対策
1.遷移先を固定化する。
  →確実な方法であり、堅牢。
   ただし、遷移ページを可変にしたい場合に変更ができない。
2.遷移先をページ番号として処理する。
  →遷移するページを以下のように管理する。
   if($_GET['url'] === '1')
   {
   	//遷移先1
   }
   if($_GET['url'] === '2')
   {
   	//遷移先2
   }
   else
   {
    //それ以外は遷移させない。
   }

3.リダイレクト先のドメインをチェックする。
  →遷移するドメインをチェックし、外部ドメインである場合は遷移を無効とする。
  if(ドメインチェック)
  {
   //遷移OK
  }
  else
  {
   //遷移NG
  }

  また、外部ドメインへの遷移を行う際には、利用者に確認を促すページを容易する場合もある。
  これをクッションページと呼ぶ。(yahooや2chのようなサイトで見かける)