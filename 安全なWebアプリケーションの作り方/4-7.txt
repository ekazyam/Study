■リダイレクトに対する問題
Google等のサイトでログインを実行すると、ログイン後、別のURLに転送される。
これをリダイレクトと呼ぶ。
リダイレクトは以下の様な脆弱性を含む場合がある。
1.オープンリダイレクタ脆弱性
2.HTTPヘッダ・インジェクション脆弱性

★用語解説
1.リダイレクト機能
　　→パラメータにより指定したURLに移動する機能のこと。
2.オープンリダイレクタ
　　→パラメータにより任意のドメインにリダイレクトできる機能のこと。
　　　利用者が意図しないタイミングで他のURLに遷移するため、
　　　フィッシング詐欺に悪用される可能性がある。
   リダイレクト先を固定にすることで防止可能。
   固定できない場合はリダイレクト先を特定のドメインに限定する。

■オープンリダイレクタによる攻撃例
以下の様なURLとパラメータを考える。
http://example.jp/47/47-001.php?url=http://trap.example.com/47/47-900.php
この例では利用者のIDとPWを入力する正規サイトのフォームを用意する。
正規サイトは、渡されたurlパラメータに応じたURLに遷移し、認証を進める機能を備えるものとする。
http://example.jp/47/47-001.php
ここで、urlパラメータに以下のような悪意のあるurlを渡す。
http://trap.example.com/47/47-900.php
正規サイトのフォームを真似て作成した悪意のあるページに誘導されることで、
利用者がIDとPWを誤って入力してしまう恐れがある。

■オープンリダイレクタによる脆弱性の要因
以下の様な場合に脆弱性が発生する。
1.urlパラメータ等、遷移するパラメータを第三者が指定可能である。
2.Webアプリケーション内で、遷移するドメインのチェックが無く、悪意のあるページに対する遷移が容易である。

ただし、広告等は元々外部のドメインを利用することが通常である。
その場合、上記1,2の要件を満たした場合でも、利用者が
外部のURLに遷移することが明白であれば、問題はない。

■脆弱性への対策
1.遷移先を固定化する。
  →確実な方法であり、堅牢。
   ただし、遷移ページを可変にしたい場合に変更ができない。
2.遷移先をページ番号として処理する。
  →遷移するページを以下のように管理する。
   if($_GET['url'] === '1')
   {
   	//遷移先1
   }
   if($_GET['url'] === '2')
   {
   	//遷移先2
   }
   else
   {
    //それ以外は遷移させない。
   }

3.リダイレクト先のドメインをチェックする。
  →遷移するドメインをチェックし、外部ドメインである場合は遷移を無効とする。
  if(ドメインチェック)
  {
   //遷移OK
  }
  else
  {
   //遷移NG
  }

  また、外部ドメインへの遷移を行う際には、利用者に確認を促すページを容易する場合もある。
  これをクッションページと呼ぶ。(yahooや2chのようなサイトで見かける)

■HTTPヘッダインジェクションによる脆弱性
HTTPヘッダインジェクションとは、リダイレクト,cookieの発行等、外部からのパラメータに応じて、
HTTPのレスポンスヘッダを生成する際に発生する脆弱性である。
HTTPのレスポンスヘッダを生成する際に、不正な改行を挿入させることで、
攻撃者の任意のレスポンスヘッダを生成、または、レスポンスボディの改ざんが行われる。
レスポンスヘッダ、ボディについては3-1を参照。

■HTTPヘッダ脆弱性による影響
以下の様な影響がある。
★レスポンスヘッダの改ざん
  →任意のcookieの生成
  →任意のURLへの誘導
★レスポンスボディの改ざん
 　→表示内容の変更
  →任意のJavascriptの実行(XSS攻撃と同等)

■HTTPヘッダインジェクションによる攻撃例
★外部ドメインへのリダイレクト
以下の様なリンクを考える。
http://example.jp/47/47-020.cgi?url=http://example.jp/%0D%0ALocation:+http://trap.example.com/47/47-900.php
urlパラメータに渡されたURLにリダイレクトする。
%0D%0(改行コード)を挿入し、直後にLocationヘッダを挿入している。
ここで指定したLocationヘッダの示す先が悪意のあるページである。
Locationヘッダが複数されていた場合に、ApacheではLocatinヘッダが複数してされていた場合に、
最後に指定されたLocationヘッダが有効となる仕様がある。
これを利用した脆弱性である。

★偽画面の表示
cookieを生成する機能を考える。
以下の様なURLにアクセスする。
これにより、set-cookieのレスポンスヘッダが返却され
pageidに指定された値をcookie値としてブラウザに作成する。
http://example.jp/47/47-021.cgi?pageid=P123
ここで、以下の様なURLとパラメータを考える。
http://example.jp/47/47-021.cgi?pageid=P%0D%0A%0D%0A%e2%97%8b%e2%97%8b%e9%8a%80%e8%a1%8c%e3%81%af%e7%a0%b4%e7%94%a3%e3%81%97%e3%81%be%e3%81%97%e3%81%9f

%0D%0A%0D%0Aは改行コード2つを示す。
レスポンスヘッダは、改行コードが挿入されるまで続く仕様を利用した脆弱性である。(3-1を参照)
改行コードが2つ挿入されることで、以降に続くパラメータがレスポンスボディとして
作成されている例である。
このことから、第三者による意図的なページを利用者は閲覧するに至る。
これを応用し、偽のフォームを容易し、利用者に個人情報の入力を促したり、
Javascriptによるcookieの盗み出しが可能となる。

■HTTPヘッダインジェクションの原因
リダイレクト先やcookie値が渡されたパラメータから生成され、そのパラメータ中に改行コードが不正に挿入されている
ことに起因する。

■HTTPヘッダインジェクションの対策
確実な方法としては、受け取ったパラメータをそのままレスポンスボディに含めないことである。
★外部パラメータをHTTPレスポンスヘッダとして出力しない。
　→リダイレクト先は固定もしくは、番号指定にする。
  →固定：リダイレクト先は常にhttp://hogehoge.jp/loginである、等
        また、可変である場合は、同一ドメインであるかをチェックする。
  →番号：1の場合は/login 2の場合は/logout、等

★HTTPレスポンスヘッダとして出力したい場合の対処
1.リダイレクトやcookie生成を特定のAPIに専任させる。
　　→個々のページで独自に実装するのではなく、言語/環境毎に容易されたAPIを用いる。
   例えばPHP等ではprint文によるhttpメッセージの出力が可能であるが、
   特殊な記号等の対処が漏れやすい。
   ただし、HTTPヘッダの改行コードの処理はAPIにより十分に対策が成されていない場合もある。
  　PHP5.3.5におけるheader関数(リダイレクト処理を行う関数)ではLFの対策は成されたが、CRは未対策である。
  　そのため、CRを用いたHTTPヘッダインジェクション攻撃は可能である等、APIでも不十分な場合もある。
   この場合、改行コードをチェックする機能を作成する必要性がある。
2.ヘッダ生成する改行コードを確認する。
  →渡されたパラメータからhttpヘッダを生成する場合に改行コードをチェックする。
  　改行コードが存在した場合にはエラーとして処理を終了させる。
  →cookie値の改行はパーセントエンコードする。