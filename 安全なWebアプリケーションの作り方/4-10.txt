■ファイルアクセスに関する脆弱性
Webアプリケーションに渡すパラメータをOS上のファイル名を指定するものが存在する。
この様な場合、以下の様な脆弱性が発生する恐れがある。
1.Webアプリケーションが動作するサーバの任意のファイルへのアクセス
  →ディレクトリトラバーサル
2.OSコマンドの不正な呼び出し
  →OSコマンドインジェクション

★ディレクトリトラバーサルについて
Webサーバ内に存在する任意のファイルの読み出し/改ざんが可能となる。
対策として以下を実施すること。
1.第三者が任意のファイル名を指定可能な仕様を避ける
2.ファイル名にディレクトリ名が含まれないようにする。
3.ファイル名を英数字に限定する。

★ディレクトリトラバーサルの攻撃例
以下の様なURLを考える。
http://hoge.com/piyo.php?file=fuga
これをWebアプリケーションで展開し、
fuga.htmlとして内容を展開する。
このfileパラメータに以下を指定すると攻撃が成立する。
file=../../../etc/hosts%00
これが展開された場合に、以下の様なパラメータとして認識される。
hosts[null].html
要点は以下である。
1. /etc/hostsの内容がhtmlとしてレスポンスとして返される。
2. nullにより、ファイル指定が終端し、続く.htmlが無効となる。
   結果として、1.の手順で指定した/etc/hostsへのアクセスが行われてしまう。

■脆弱性が発生する要因
要因として以下の様な仕様であった場合に脆弱性が発生する可能性がある。
1.ファイル名として外部からのパラメータを直接OS上のファイルとして指定可能である。
　→ファイル名を固定にすることで第三者からの任意の指定を防止できる。
 →ファイル名をセッション変数に保持する。
 →ファイル名を直接指定せず、番号等に関連付け、間接的にアクセスする。
2.ファイル名としてディレクトリを含むパラメータを指定可能である。
 →ファイル名の指定に対し、パス名を含まない仕様とすること。
  PHPではbasename関数を用いることで、パラメータからディレクトリを削除し、
  ファイル名だけ抜き出すことができる。
 →パスを扱う際はOSに依存するパスを示す文字をカバーするライブラリを利用すること。
  win→￥,: / linux→/
3.指定したファイル名/パスのチェックが妥当でない。
 →パラメータに許可する値を英数字のみに限定することで、ディレクトリトラバーサルに利用する
 　ディレクトリを示す記号の利用を防止できる。

■意図しないファイルの公開
非公開にすべきファイルが公開されることがある。
公開フォルダに非公開にすべきファイルを配置することによる。
以下の様な構成を考える。
http://hoge.com/data
このディレクトリにファイルを配置する。
☆公開ファイル
index.html
☆非公開ファイル
user.txt
この場合、開発者はhttp://hoge.com/data/index.htmlが表示されることを
希望している。
ただし、http://hoge.com/dataにアクセスすると、ファイル一覧が表示され、
公開を希望しないファイルの存在/内容が閲覧できてしまう。
これをディレクトリ・リスティングと呼ぶ。

★ディレクトリ・リスティングの原因
1.非公開ファイルが公開フォルダに配置されている。
2.ファイル名に対する推測が容易である。
3.ファイルに対するアクセス制限がかかっていない。

1.に対し、原則として非公開にしたいファイルを公開フォルダに配置しないこと。
2.に対し、以下の様な例が考えられる。
  1.ディレクトリ・リスティングが可能な設定になっている場合。
  2.ファイル名が連番やuser.txt等の推測が容易である場合。
  3.エラーメッセージが利用者に表示されてしまい、非公開ファイルの名称が漏洩した場合。
  4.検索エンジン等の外部からリンクが作成されており、公開されてしまっている。
3.について、httpd.confや.htaccessによる制限を設ける。
  ただし、3.のみの対応を行った場合に、サーバ移転等のタイミングで
  設定が初期化、または漏れていた場合に非公開ファイルが公開されてしまう。
  そのため、根本的な対策としては、公開フォルダに非公開ファイルを配置しないことが有効である。