■cookieの生成における脆弱性
cookieの前提として、セッションIDをブラウザに保存するために使用することが一般的である。
それ以外の利用方法は可能ではあるが、推奨されない。(後述)
cookieに関連する脆弱性は以下のように大別できる。
1.cookieの利用目的の誤り
2.cookieの生成方法に欠陥が存在する

★cookieの不適切な利用
一般的にcookieにはセッションIDを保存し、データはサーバへ保存する。
cookieに保存されたセッションIDがサーバ上のデータとひも付けされる。
セッションID以外のデータ(ユーザID/PW等)を保存するとJavascriptにより
取得される可能性や、漏洩したID/PWが第三者に利用される可能性が存在する。

★セッション変数とcookie
セッション変数とcookieの関係を考える。
どちらも情報を保持できるが、個人情報等の重要な情報はセッション変数に保存すべきである。
以下の様な理由による。
1.cookieは利用者が任意に変更可能である。
2.サイズの制限が存在する。
3.cookieは漏洩すると第三者がなりすまし可能である。

また、cookieにのみ存在する利点として、有効期間が指定できる。
セッション変数はそのセッションでのみ有効である。

★セッションやサーバをまたがる状態保持について
セッション変数は、セッションやサーバをまたがって情報を保持できない。
この必要性が生じた場合、cookieを利用する。
この時、cookieにはトークンと呼ばれる乱数を保持し、
認証状態/個人情報はサーバ側で保持する。
通販等で、ログイン状態を保持するのチェックボックスが存在するものはこれに該当する。

★cookieのセキュア属性不備
セキュア属性を付与しない場合、以下の様な問題が発生する恐れがある。
1.http(平文)でcookieに保存されたセッションIDが漏洩する。

これを防止するために、httpsプロトコルでアクセスした時のみcookieを送信するように設定する。
これをセキュア属性と呼ぶ。

例えば以下の様な攻撃例が考えられる。
罠サイト：http://hoge.com
正規サイト：https://hoge.com
正規サイトで作成したcookieが罠サイトで読み出されてしまう。
これはセキュア属性の不備により、http/https両方でcookieが読み出されてしまう為である。
また、ドメインが同一であり、cookie送信の条件を満たす為である。
ネットワークを監視することで、パケットを取得し、平文化されたデータ(http)を取得可能である。

★セキュア属性による不具合
httpsのみに読み込みを許可するセキュア属性を付与した場合、
httpでの読み込みはできなくなる。
従って、セッションIDを共有できず、セッション管理機能が利用できなくなる。(後述)